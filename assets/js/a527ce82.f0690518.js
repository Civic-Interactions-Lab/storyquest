"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[8170],{22805:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var s=o(74848),t=o(28453);const i={sidebar_position:1},r="Backend Documentation",c={id:"api-specification/backend",title:"Backend Documentation",description:"This document describes the backend logic and Firebase Cloud Functions used in the StoryQuest application. These functions are responsible for managing game rooms, players, and the game lifecycle using Firestore.",source:"@site/docs/api-specification/backend.md",sourceDirName:"api-specification",slug:"/api-specification/backend",permalink:"/storyquest/docs/api-specification/backend",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Ian Tyler Applebaum",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"API Specification",permalink:"/storyquest/docs/category/api-specification"},next:{title:"Home Page",permalink:"/storyquest/docs/api-specification/Frontend Documentation/homepage"}},a={},d=[{value:"Firebase Initialization",id:"firebase-initialization",level:2},{value:"Cloud Functions Overview",id:"cloud-functions-overview",level:2},{value:"Common Setup",id:"common-setup",level:3},{value:"Function: <code>createRoom</code>",id:"function-createroom",level:2},{value:"Function: <code>joinRoom</code>",id:"function-joinroom",level:2},{value:"Function: <code>startGame</code>",id:"function-startgame",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"backend-documentation",children:"Backend Documentation"}),"\n",(0,s.jsx)(n.p,{children:"This document describes the backend logic and Firebase Cloud Functions used in the StoryQuest application. These functions are responsible for managing game rooms, players, and the game lifecycle using Firestore."}),"\n",(0,s.jsx)(n.h2,{id:"firebase-initialization",children:"Firebase Initialization"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { initializeApp } from "firebase/app";\nimport { getFirestore } from "firebase/firestore";\n\nconst firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n  projectId: "storyquest-fcdc2",\n  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\n  measurementId: process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID,\n};\n\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore(app);\n\nexport { db };\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Environment variables should be stored in a ",(0,s.jsx)(n.code,{children:".env.local"})," file. Keys prefixed with ",(0,s.jsx)(n.code,{children:"NEXT_PUBLIC_"})," are exposed to the client."]}),"\n",(0,s.jsx)(n.h2,{id:"cloud-functions-overview",children:"Cloud Functions Overview"}),"\n",(0,s.jsxs)(n.p,{children:["All functions are defined using Firebase's ",(0,s.jsx)(n.code,{children:"onCall"})," HTTP trigger. They use the Firebase Admin SDK to securely interact with Firestore."]}),"\n",(0,s.jsx)(n.h3,{id:"common-setup",children:"Common Setup"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'const functions = require("firebase-functions");\nconst admin = require("firebase-admin");\n\nadmin.initializeApp();\nconst db = admin.firestore();\n'})}),"\n",(0,s.jsxs)(n.h2,{id:"function-createroom",children:["Function: ",(0,s.jsx)(n.code,{children:"createRoom"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Purpose:"})," Initializes a new game room."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Trigger Type:"})," Callable (",(0,s.jsx)(n.code,{children:"functions.https.onCall"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Input:"})," None"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Output:"})," ",(0,s.jsx)(n.code,{children:"{ roomId: string }"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Logic:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Generates a unique document in the ",(0,s.jsx)(n.code,{children:"rooms"})," collection."]}),"\n",(0,s.jsx)(n.li,{children:"Assigns the current authenticated user as the host."}),"\n",(0,s.jsx)(n.li,{children:"Initializes game state and player placeholders."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'exports.createRoom = functions.https.onCall(async (data, context) => {\n  const newRoomRef = db.collection("rooms").doc();\n  const roomId = newRoomRef.id;\n\n  await newRoomRef.set({\n    gameState: "waiting",\n    players: {},\n    host: context.auth?.uid || "anonymous",\n    storyProgress: {}\n  });\n\n  return { roomId };\n});\n'})}),"\n",(0,s.jsxs)(n.h2,{id:"function-joinroom",children:["Function: ",(0,s.jsx)(n.code,{children:"joinRoom"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Purpose:"})," Allows a player to join an existing game room."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Trigger Type:"})," Callable (",(0,s.jsx)(n.code,{children:"functions.https.onCall"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Input:"})," ",(0,s.jsx)(n.code,{children:"{ roomId: string, playerName: string }"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Output:"})," ",(0,s.jsx)(n.code,{children:"{ success: true, playerId: string }"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Logic:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Verifies the room exists."}),"\n",(0,s.jsxs)(n.li,{children:["Adds a player to the ",(0,s.jsx)(n.code,{children:"players"})," field using either their UID or a generated guest ID."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'exports.joinRoom = functions.https.onCall(async (data, context) => {\n  const { roomId, playerName } = data;\n  if (!roomId || !playerName) throw new functions.https.HttpsError("invalid-argument", "Missing fields.");\n\n  const roomRef = db.collection("rooms").doc(roomId);\n  const roomDoc = await roomRef.get();\n\n  if (!roomDoc.exists) throw new functions.https.HttpsError("not-found", "Room does not exist.");\n\n  const playerId = context.auth?.uid || `guest_${Math.random().toString(36).substring(2, 8)}`;\n\n  await roomRef.update({\n    [`players.${playerId}`]: { name: playerName, role: "player" }\n  });\n\n  return { success: true, playerId };\n});\n'})}),"\n",(0,s.jsxs)(n.h2,{id:"function-startgame",children:["Function: ",(0,s.jsx)(n.code,{children:"startGame"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Purpose:"})," Updates the ",(0,s.jsx)(n.code,{children:"gameState"}),' of a room to "started".']}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Trigger Type:"})," Callable (",(0,s.jsx)(n.code,{children:"functions.https.onCall"}),")"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Input:"})," ",(0,s.jsx)(n.code,{children:"{ roomId: string }"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Output:"})," ",(0,s.jsx)(n.code,{children:"{ success: true }"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Logic:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Validates that the room exists."}),"\n",(0,s.jsxs)(n.li,{children:["Updates the ",(0,s.jsx)(n.code,{children:"gameState"})," field to ",(0,s.jsx)(n.code,{children:'"started"'}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'exports.startGame = functions.https.onCall(async (data, context) => {\n  const { roomId } = data;\n  if (!roomId) throw new functions.https.HttpsError("invalid-argument", "Room ID is required.");\n\n  const roomRef = db.collection("rooms").doc(roomId);\n  const roomDoc = await roomRef.get();\n\n  if (!roomDoc.exists) throw new functions.https.HttpsError("not-found", "Room does not exist.");\n\n  await roomRef.update({ gameState: "started" });\n\n  return { success: true };\n});\n'})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>c});var s=o(96540);const t={},i=s.createContext(t);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);